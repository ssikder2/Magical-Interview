// Flexible form data structure that can hold any key-value pairs
// Used for storing form field names and their corresponding values
export interface FormData {
  [key: string]: string;
}

// Represents a collapsible form section with name and open/closed state
// Used by the perception module to track which sections are accessible
export interface Section {
  name: string;
  isOpen: boolean;
}

// Represents a form field with its properties and current state
// Used by the perception module to identify fields that need filling
export interface Field {
  name: string;
  type: string;
  value: string;
  isVisible: boolean;
}

// Complete state of a web form at any given moment
// Contains sections, visible fields, and completion status for AI decision making
export interface PageState {
  sections: Section[];
  visibleFields: Field[];
  formCompleted: boolean;
  completedSections: string[];
  completedFields: string[];
}

// Individual action to be executed on a form field
// Used for batch operations to fill multiple fields efficiently
export interface SubAction {
  action: string;
  target: string;
  value: string;
}

// High-level action decided by the AI decision module
// Determines what the agent should do next (fill fields, open sections, submit, etc.)
export interface Action {
  type: 'BATCH_ACTIONS' | 'OPEN_SECTION' | 'SUBMIT' | 'COMPLETE' | 'RECOVER';
  actions?: SubAction[];
  target?: string;
  reason: string;
}

// Detailed execution plan generated by AI for specific actions
// Converts high-level actions into specific Playwright commands
export interface ExecutionPlan {
  command: 'click' | 'fill' | 'selectOption' | 'waitForSelector';
  selector: string;
  value?: string;
  reason: string;
}
